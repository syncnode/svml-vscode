# [PackageDev] target_format: plist, ext: tmLanguage
---
name: SVML
scopeName: source.svml
fileTypes: [ts]
uuid: ef98eb90-bf9b-11e4-bb52-0800200c9a66

patterns:
- include: '#statements'
- name: comment.line.shebang.ts
  match: \A(#!).*(?=$)
  captures:
    '1': { name: punctuation.definition.comment.ts }

repository:
  statements:
    patterns:
    - include: '#string'
    - include: '#comment'
    - include: '#svml-declaration'
    - include: '#svml-property'
    - include: '#svml-tag'
    - include: '#svml-binding'
    - include: '#svml-function'
    - include: '#svml-style'
    - include: '#svml-class'
    - include: '#svml-code'
    - name: keyword.control.untitled.ts.svml
      match: (?<!\.|\$)\bsvml\b(?!\$)

  string:
    patterns:
    - include: '#qstring-single'
    - include: '#qstring-double'

  qstring-double:
    name: string.quoted.double.ts
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.ts }
    end: '(")|((?:[^\\\n])$)'
    endCaptures:
      '1': { name: punctuation.definition.string.end.ts }
      '2': { name: invalid.illegal.newline.ts }
    patterns:
    - include: '#string-character-escape'

  qstring-single:
    name: string.quoted.single.ts
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.ts }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.ts }
      '2': { name: invalid.illegal.newline.ts }
    patterns:
    - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.ts
    match: \\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  svml-declaration:
    name: entity.name.type.ts
    match: (^[A-Z][\w]*)

  svml-property:
    name: variable.ts
    match: ^[\t ]*[#]([\w]*)

  svml-function:
    patterns:
    - name: meta.block.ts
      begin: ^[\t ]*([\w]*)\(.*\)\s*({)
      beginCaptures:
        '1': { name: keyword.control.untitled.ts }
        '2': { name: punctuation.definition.block.ts }
      end: (?<=\})
      endCaptures:
        '0': { name: punctuation.definition.block.ts }
      patterns:
      - include: source.js

  svml-tag:
    name: entity.name.tag.ts
    match: ^[\t ]+[#\w]*:(\w*)

  svml-binding:
    name: entity.name.tag.ts
    match: ^[\t ]+[#:\w]* (\$[\w\.]*)

  svml-class:
    name: variable.other.readwrite.ts.svml
    match: \[(.*)\]

  svml-style:
    patterns:
    - name: meta.block.ts
      begin: ^[\t ]*(\.[\w]*)\s*({)
      beginCaptures:
        '1': { name: keyword.control.untitled.ts }
        '2': { name: punctuation.definition.block.ts }
      end: (?<=\})
      endCaptures:
        '0': { name: punctuation.definition.block.ts }
      patterns:
      - include: '#comment'

  comment:
    patterns:
    - name: comment.block.documentation.ts
      begin: /\*\*(?!/)
      beginCaptures:
        '0': { name: punctuation.definition.comment.ts }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.ts }
      patterns:
      - include: '#docblock'
    - name: comment.block.ts
      begin: /\*
      beginCaptures:
        '0': { name: punctuation.definition.comment.ts }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.ts }
    - begin: (^[ \t]+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.ts }
      end: (?=$)
      patterns:
      - name: comment.line.double-slash.ts
        begin: //
        beginCaptures:
          '0': { name: punctuation.definition.comment.ts }
        end: (?=$)
